buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "com.modrinth.minotaur"

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://www.cursemaven.com"
        allowInsecureProtocol = true
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }

    maven {
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //!! TOOL
    implementation fg.deobf("curse.maven:jade-324717:6271651")
    implementation fg.deobf("curse.maven:emi-580555:6362010")


    //For tags
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    //!! DEPENDENCIES
    implementation fg.deobf("maven.modrinth:moonlight:forge_1.20-${moonlight_mavenVersion}")

}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

subprojects {

    var env = System.getenv()
    var modLoader = name

    var changelogFile = rootProject.file("changelog.md")
    var changelogText = changelogFile.exists() ? changelogFile.text : ""

    if (env.MODRINTH_TOKEN) {
        modrinth {
            projectId = "rocky-minerals"
            uploadFile = tasks.remapJar
            additionalFiles.add(tasks.remapSourcesJar)
            gameVersions = [minecraft_version]
            loaders = [modLoader]
            changelog = changelogText

            versionName = mod_version
            dependencies {
                project "moonlight"
            }
        }
    }

    if (env.CURSEFORGE_TOKEN) {
        curseforge {
            apiKey = env.CURSEFORGE_TOKEN
            project {
                id = project_id
                changelog = changelogText
                changelogType = 'markdown'
                releaseType = 'release'
                addGameVersion minecraft_version
                addGameVersion modLoader.capitalize()

                mainArtifact(tasks.remapJar)

                relations {
                    incompatible("vminus")
                    requiredDependency("selene")
                }
            }
        }
    }
}